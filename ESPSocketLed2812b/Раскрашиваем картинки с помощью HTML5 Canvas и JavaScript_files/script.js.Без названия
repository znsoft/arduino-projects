function pageContent(el) {

(function(){
	var myForms = document.getElementsByTagName("form");
	for (var i=0;i<myForms.length;i++){
		myForms[i].reset();
	}
})()

  this.screenWidth = (screen.width>=1200)? 'lg': ((screen.width>=992 && screen.width<1200)? 'md' : ((screen.width>=768 && screen.width<992)? 'sm' : 'xs'));

  this.loadImg = function() {
    var figure = el.getElementsByClassName("figure-loading");
	for (var i=0;i<figure.length;i++){
		if (figure[i].getAttribute("data-img")){
			//if((figure[i].parentNode.className.indexOf('main-entry') + 1) || (this.screenWidth!='lg' && this.screenWidth!='md')){
				figure[i].style.backgroundImage = 'url(/'+figure[i].getAttribute("data-img")+')';
			//} else {
			//	figure[i].style.backgroundImage = 'url(/'+figure[i].getAttribute("data-img-sm")+')';
			//}
		}
	}
	return this;
  };

this.addTouchIco = function(){
if(this.isTouchDevice.call()) {
	var sample =  el.getElementsByTagName("pre");


	for (var i=0;i<sample.length;i++){
		sample[i].className = "role-touch";
		sample[i].addEventListener("touchstart", foo, false);
	}
}	
    function foo() {
      this.className = "";
      this.removeEventListener('touchstart', foo, false);
    }


return this;
};

 this.isTouchDevice = function() {

//alert ((('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch)? true : false);

  try {
    document.createEvent('TouchEvent');
    return true;
  }
  catch(e) {
    return false;
  }
};

this.scrollContent = function(cont_id) {

var ssb = {
    aConts  : [],
    mouseY : 0,
    N  : 0,
    asd : 0, /*active scrollbar element*/
    sc : 0,
    sp : 0,
    to : 0
}

    // initialization
    ssb.init = function () {
        if (window.oper || (! window.addEventListener && ! window.attachEvent)) { return false; }

        // temp inner function for event registration
        function addEvent (o, e, f) {
            if (window.addEventListener) { o.addEventListener(e, f, false); ssb.w3c = true; return true; }
            if (window.attachEvent) return o.attachEvent('on' + e, f);
            return false;
        }

        // binding events
        addEvent(window.document, 'mousemove', ssb.onmousemove);
        addEvent(window.document, 'mouseup', ssb.onmouseup);
        addEvent(window, 'resize', ssb.refresh);
        return true;
    }

    // create and append div finc
    create_div = function(c, tag, cont, cont_clone) {
        var o = document.createElement(tag);
        o.cont = cont;
        o.className = c;
		if (tag == 'iframe') { o.setAttribute('name', c); }
        cont_clone.appendChild(o);
        return o;
    }
    // do clear of controls
    ssb.clear = function () {
        clearTimeout(ssb.to);
        ssb.sc = 0;
        return false;
    }
    // refresh scrollbar
    ssb.refresh = function () {
        for (var i = 0, N = ssb.N; i < N; i++) {
            var o = ssb.aConts[i];
            o.ssb_onscroll();
            o.sb.style.width = o.st.style.width = o.sw + 'px';
            o.sb.style.height = Math.ceil(Math.max(o.sw * .5, o.ratio * o.offsetHeight) + 1) + 'px';
        }
    }
    // arrow scrolling
    ssb.arrow_scroll = function () {
        if (ssb.sc != 0) {
            ssb.asd.scrollTop += 6 * ssb.sc / ssb.asd.ratio;
            ssb.to = setTimeout(arrow_scroll, ssb.sp);
            ssb.sp = 32;
        }
    }

    /* event binded functions : */
    // scroll on mouse down
    ssb.mousedown = function (o, s) {
        if (ssb.sc == 0) {
            // new class name
            o.cont.sb.className = 'ssb_sb ssb_sb_down';
            ssb.asd = o.cont;
            ssb.sc = s;
            ssb.sp = 400;
            ssb.arrow_scroll();
        }
    },
    // on mouseMove binded event
    ssb.onmousemove = function(e) {
        if (! e) e = window.event;
        // get vertical mouse position
        ssb.mouseY = e.screenY;
        if (ssb.asd.sg) ssb.asd.scrollTop = ssb.asd.sZ + (ssb.mouseY - ssb.asd.yZ) / ssb.asd.ratio;
    },
    // on mouseUp binded event
    ssb.onmouseup = function (e) {
        if (! e) e = window.event;
        var tg = (e.target) ? e.target : e.srcElement;
        if (ssb.asd && document.releaseCapture) ssb.asd.releaseCapture();

        // new class name
        if (ssb.asd) ssb.asd.sb.className = (tg.className.indexOf('scrollbar') > 0) ? 'ssb_sb ssb_sb_over' : 'ssb_sb';
        document.onselectstart = '';
        ssb.clear();
        ssb.asd.sg = false;
    }

        var cont = document.getElementById(cont_id);
        // perform initialization
        if (!cont || !ssb.init()) return false;




        var cont_clone = cont.cloneNode(false);
        cont_clone.style.overflow = "hidden";
		cont.className="content_clone";
		cont.id="";
        cont.parentNode.appendChild(cont_clone);
        cont_clone.appendChild(cont);



        var cont_wrap = cont.cloneNode(false);
		cont.className="submenu__content_wrap";
        cont.parentNode.appendChild(cont_wrap);
        cont_wrap.appendChild(cont);

        // adding new container into array
		cont = cont.parentNode;
        ssb.aConts[ssb.N++] = cont;
        cont.sg = false;

        //creating scrollbar child elements
		
		cont.board = create_div('ssb_board', 'div', cont, cont_clone);
        cont.st = create_div('ssb_st', 'div', cont, cont.board);
        cont.sb = create_div('ssb_sb', 'div', cont, cont.board);
		
		cont.iframe = create_div('submenu__iframe', 'iframe', '', cont_wrap.childNodes[0]);
		submenu__iframe.onresize = ssb.refresh;

        // on mouse down processing
        cont.sb.onmousedown = function (e) {
            if (! this.cont.sg) {
                if (! e) e = window.event;

                ssb.asd = this.cont;
                this.cont.yZ = e.screenY;
                this.cont.sZ = cont.scrollTop;
                this.cont.sg = true;

                // new class name
                this.className = 'ssb_sb ssb_sb_down';
            }
            return false;
        }
        // on mouse down on free track area - move our scroll element too
        cont.st.onmousedown = function (e) {
            if (! e) e = window.event;
            ssb.asd = this.cont;

            ssb.mouseY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
            for (var o = this.cont, y = 0; o != null; o = o.offsetParent) y += o.offsetTop;
            this.cont.scrollTop = (ssb.mouseY - y - (this.cont.ratio * this.cont.offsetHeight / 2) - this.cont.sw) / this.cont.ratio;
            this.cont.sb.onmousedown(e);
        }


        // on mouse over - apply custom class name: ssb_sb_over
        cont.sb.onmouseover = function (e) {
            if (! this.cont.sg) this.className = 'ssb_sb ssb_sb_over';
            return false;
        }

        // on mouse out - revert back our usual class name 'ssb_sb'
        cont.sb.onmouseout  = function (e) {
            if (! this.cont.sg) this.className = 'ssb_sb';
            return false;
        }

        // onscroll - change positions of scroll element
        cont.ssb_onscroll = function () {
            this.ratio = (this.offsetHeight) / this.scrollHeight;
            this.sb.style.top = Math.floor( this.scrollTop * this.ratio) + 'px';
        }

        // scrollbar width
        cont.sw = 8;

        // start scrolling
        cont.ssb_onscroll();
        ssb.refresh();
        
        // binding own onscroll event
        cont.onscroll = cont.ssb_onscroll;
        return cont;
    

}

this.sticky = function (truck,rails,keep){
    //на сколько прокрутили страницу
    function getBodyScrollTop(){return self.pageYOffset || (document.documentElement && document.documentElement.scrollTop) || (document.body && document.body.scrollTop);}

	function setPositionTop(truck, rails) {
		var top_max = rails.offsetHeight - truck.offsetHeight,
			top = getBodyScrollTop() - rails.offsetTop;

		if (top < 0) {
			top = 0;
		}
		if (top > top_max && top_max > 0) {
			top = top_max;
		}
		truck.style.top = top;
		truck.style.bottom = 'auto';
	}

	function setPositionBottom(truck, rails) {
		var rails_height = rails.offsetHeight,
			bottom_max = rails_height - truck.offsetHeight,
			bottom = rails.offsetTop + rails_height - window.offsetHeight - getBodyScrollTop();
		
		if (bottom < 0) {
			bottom = 0;
		}
		if (bottom > bottom_max && bottom_max > 0) {
			bottom = bottom_max;
		}
		truck.style.top = 'auto';
		truck.style.bottom = bottom;
	}

	Ascroll = function(){
		if (keep === 'top') {
			setPositionTop(truck, rails);
		}
		if (keep === 'bottom') {
			setPositionBottom(truck, rails);
		}
	}

	document.body.addEventListener('scroll', Ascroll, false);				


}


this.videoLesson = function (p){

var html,
	_self = this,
	el = typeof(p) == "string" ? document.querySelector(p) : p;

if(el && el.getAttribute('data-href') && el.getAttribute('data-path')){
	
	var videoContainer  = document.querySelector("#ecran .video");
		
		
		 html = '<div class="col-sm-8 col-md-9"><video controls id="tv" class="video__tv" preload><source src="'+ el.getAttribute('data-path') + el.getAttribute('data-href') +'" type="video/mp4" />'+
			 (el.getAttribute('data-path') ? '<track src="'+ el.getAttribute('data-path') + el.getAttribute('data-track') +'" kind="subtitles" srclang="ru" label="Русский" default />' : '') +
			 '<p>Ваш браузер не поддерживает видео-элементы</p></video></div>'+
			 '<div class="col-sm-4 col-md-3"><div class="video_info clearfix"><h6 class="video_info__header">'+el.querySelector(".video_playlist__title").innerHTML+'</h6>'+
			 '<div class="video_info_date">Дата публикации: 28 января 2016</div><ul class="video_info_list"><li><img width="18" height="18" class="video_info__categ" src="http://assets.digitaltutors.com/dtv_/categories/231/icon_18x18.gif" alt><a href="">Unity</a></li><li><span class="video_info_list__icons video_info_list__icons--durations"></span>'+el.querySelector(".video_playlist__duration").innerHTML+'</li><li><a href=""><span class="video_info_list__icons video_info_list__icons--download"></span>Скачать файлы</a></li></ul></div></div>';
		
		videoContainer.innerHTML = html;
		
		var tv = document.getElementById("tv");
		var timer = setInterval(function(){
		if(tv.readyState == 4 || tv.readyState == 3){
			clearInterval(timer);
			videoContainer.parentNode.querySelector(".ecran__loading").style.display = "none";
			videoContainer.className = "video video--active row clearfix";
		}
		},500);
		if(typeof(this.videoLesson.init) == "undefined") {
			var playlist_item = el.parentNode.querySelectorAll(".video_playlist__item");
			for(var i=0, ii = playlist_item.length; i<ii; i++){
				playlist_item[i].addEventListener("click",function(){
					if(this.classList.contains("video_playlist__item--active")) return false;
					this.parentNode.querySelector(".video_playlist__item--active").classList.remove("video_playlist__item--active");
					this.classList.add("video_playlist__item--active");
					_self.videoLesson(this);
				})
			}

			this.videoLesson.init = true;
		}
	}
	return this;
}

return this;
}

var page = new  pageContent(document.getElementById("siteContent"));
page.loadImg().videoLesson("#playlist_container .video_playlist__item--active").addTouchIco().scrollContent("submenu");

//alert(page.screenWidth);